import { defineTheme } from "./defineTheme";

const languageOptions = [
	{ label: "Abap", value: "abap" },
	{ label: "Apex", value: "apex" },
	{ label: "Azcli", value: "azcli" },
	{ label: "BAT", value: "bat" },
	{ label: "Bicep", value: "bicep" },
	{ label: "Clojure", value: "clojure" },
	{ label: "Coffee", value: "coffee" },
	{ label: "C++", value: "cpp" },
	{ label: "C#", value: "csharp" },
	{ label: "CSP", value: "csp" },
	{ label: "CSS", value: "css" },
	{ label: "Cypher", value: "cypher" },
	{ label: "Dart", value: "dart" },
	{ label: "Docker File", value: "dockerfile" },
	{ label: "ECL", value: "ecl" },
	{ label: "Elixir", value: "elixir" },
	{ label: "Flow9", value: "flow9" },
	{ label: "Freemarker2", value: "freemarker2" },
	{ label: "F#", value: "fsharp" },
	{ label: "Go", value: "go" },
	{ label: "GraphQL", value: "graphql" },
	{ label: "Handlebars", value: "handlebars" },
	{ label: "HCL", value: "hcl" },
	{ label: "HTML", value: "html" },
	{ label: "INI", value: "ini" },
	{ label: "Java", value: "java" },
	{ label: "Javascript", value: "javascript" },
	{ label: "Julia", value: "julia" },
	{ label: "Kotlin", value: "kotlin" },
	{ label: "Less", value: "less" },
	{ label: "Lexon", value: "lexon" },
	{ label: "Liquid", value: "liquid" },
	{ label: "Lua", value: "lua" },
	{ label: "M3", value: "m3" },
	{ label: "Markdown", value: "markdown" },
	{ label: "MDX", value: "mdx" },
	{ label: "mips", value: "mips" },
	{ label: "msdax", value: "msdax" },
	{ label: "MySQL", value: "mysql" },
	{ label: "Objective-C", value: "objective-c" },
	{ label: "Pascal", value: "pascal" },
	{ label: "Pascaligo", value: "pascaligo" },
	{ label: "Perl", value: "perl" },
	{ label: "PgSQL", value: "pgsql" },
	{ label: "Php", value: "php" },
	{ label: "PLA", value: "pla" },
	{ label: "Postiats", value: "postiats" },
	{ label: "PowerQuery", value: "powerquery" },
	{ label: "PowerShell", value: "powershell" },
	{ label: "Protobuf", value: "protobuf" },
	{ label: "Pug", value: "pug" },
	{ label: "Python", value: "python" },
	{ label: "Q Sharp", value: "qsharp" },
	{ label: "R", value: "r" },
	{ label: "Razor", value: "razor" },
	{ label: "Redis", value: "redis" },
	{ label: "Redshift", value: "redshift" },
	{ label: "Restructuredtext", value: "restructuredtext" },
	{ label: "Ruby", value: "ruby" },
	{ label: "Rust", value: "rust" },
	{ label: "SB", value: "sb" },
	{ label: "Scala", value: "scala" },
	{ label: "Scheme", value: "scheme" },
	{ label: "SCSS", value: "scss" },
	{ label: "Shell", value: "shell" },
	{ label: "Solidity", value: "solidity" },
	{ label: "Sophia", value: "sophia" },
	{ label: "SparQL", value: "sparql" },
	{ label: "SQL", value: "sql" },
	{ label: "ST", value: "st" },
	{ label: "Swift", value: "swift" },
	{ label: "Systemverilog", value: "systemverilog" },
	{ label: "TCL", value: "tcl" },
	{ label: "Test", value: "test" },
	{ label: "Twig", value: "twig" },
	{ label: "TypeScript", value: "typescript" },
	{ label: "VB", value: "vb" },
	{ label: "wgsl", value: "wgsl" },
	{ label: "XML", value: "xml" },
	{ label: "YAML", value: "yaml" },
];

const gradientsList = [
	"bg-gradient-to-r from-red-500 to-orange-500",
	"bg-gradient-to-r from-rose-400 to-red-500",
	"bg-gradient-to-r from-pink-500 to-rose-500",
	"bg-gradient-to-r from-amber-200 to-yellow-400",
	"bg-gradient-to-r from-amber-500 to-pink-500",
	"bg-gradient-to-r from-violet-200 to-pink-200",
	"bg-gradient-to-r from-blue-200 to-cyan-200",
	"bg-gradient-to-r from-teal-200 to-teal-500",
	"bg-gradient-to-r from-lime-400 to-lime-500",
	"bg-gradient-to-r from-teal-400 to-yellow-200",
	"bg-gradient-to-r from-emerald-400 to-cyan-400",
	"bg-gradient-to-r from-indigo-400 to-cyan-400",
	"bg-gradient-to-r from-cyan-500 to-blue-500",
	"bg-gradient-to-r from-indigo-500 to-blue-500",
	"bg-gradient-to-r from-blue-600 to-violet-600",
	"bg-gradient-to-r from-fuchsia-500 to-cyan-500",
	"bg-gradient-to-r from-fuchsia-600 to-pink-600",
	"bg-gradient-to-r from-fuchsia-600 to-purple-600",
	"bg-gradient-to-r from-fuchsia-500 to-pink-500",
	"bg-gradient-to-r from-violet-500 to-purple-500",
	"bg-gradient-to-r from-violet-600 to-indigo-600",
	"bg-gradient-to-r from-stone-500 to-stone-700",
	"bg-gradient-to-r from-slate-300 to-slate-500",
	"bg-gradient-to-r from-emerald-500 to-emerald-900",
];

const backgroundColorList = [
	"bg-gray-300",
	"bg-gray-400",
	"bg-gray-500",
	"bg-gray-600",
	"bg-red-100",
	"bg-red-200",
	"bg-red-300",
	"bg-red-400",
	"bg-red-500",
	"bg-red-600",
	"bg-red-700",
	"bg-orange-400",
	"bg-orange-500",
	"bg-orange-600",
	"bg-orange-700",
	"bg-yellow-300",
	"bg-yellow-400",
	"bg-yellow-500",
	"bg-yellow-600",
	"bg-green-300",
	"bg-green-400",
	"bg-green-500",
	"bg-green-600",
	"bg-green-700",
	"bg-teal-300",
	"bg-teal-400",
	"bg-teal-500",
	"bg-teal-600",
	"bg-teal-700",
	"bg-blue-300",
	"bg-blue-400",
	"bg-blue-500",
	"bg-blue-600",
	"bg-blue-700",
	"bg-blue-800",
	"bg-indigo-400",
	"bg-indigo-500",
	"bg-indigo-600",
	"bg-indigo-700",
	"bg-purple-300",
	"bg-purple-400",
	"bg-purple-500",
	"bg-purple-600",
	"bg-pink-300",
	"bg-pink-400",
	"bg-pink-500",
	"bg-pink-600",
	"bg-pink-700",
];

const selectStyles = {
	option: (baseStyles, state) => ({
		...baseStyles,
		margin: "4px 0",
		padding: "6px 8px",
		paddingLeft: "20px",
		borderRadius: "5px",
		backgroundColor: state.isSelected
			? "#dc2626"
			: state.isFocused
			? "#f1f1f1"
			: "white",
	}),
	valueContainer: (baseStyles) => ({
		...baseStyles,
	}),
	container: (baseStyles) => ({
		...baseStyles,
	}),
	control: (baseStyles) => ({
		...baseStyles,
		borderColor: "#cccccc",
		boxShadow: "#cccccc solid 1px",
	}),
	menuList: (baseStyles) => ({
		...baseStyles,
		padding: "8px",
		overflow: "auto",
	}),
	input: (baseStyles) => ({
		...baseStyles,
		padding: "0",
		margin: "0",
	}),
	indicatorSeparator: (baseStyles) => ({
		...baseStyles,
		backgroundColor: "var(--dark2)",
		margin: "20% 0",
	}),

	indicatorsContainer: (baseStyles) => ({
		...baseStyles,
	}),
	clearIndicator: (baseStyles) => ({
		...baseStyles,
	}),
	dropdownIndicator: (baseStyles) => ({
		...baseStyles,
	}),
};

export {
	selectStyles,
	languageOptions,
	gradientsList,
	backgroundColorList,
	defineTheme,
};
